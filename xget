#!/usr/bin/env python
"""
Get html from dynamic pages
"""

import argparse
import os
import shutil
import subprocess
import sys
import tempfile

from urllib.parse import urlparse, ParseResult

from pyvirtualdisplay import Display
from selenium.webdriver import firefox
from selenium.common.exceptions import WebDriverException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait


VERSION = "1.4"


def is_container() -> bool:
    """Returns True if we're inside a Podman/Docker container, False otherwise."""
    return os.getenv("container") == "podman" or os.path.isfile("/.dockerenv")


def xget(  # pylint: disable=too-many-positional-arguments
    url: str | ParseResult,
    debug: bool = False,
    insecure: bool = False,
    user_agent: str | None = None,
    timeout: int = 5,
    output_file: str | None = None,
) -> None:
    """
    Get url
    """
    assert isinstance(url, str)
    if not urlparse(url).scheme:
        url = f"https://{url}"
    service = firefox.service.Service(
        log_output=sys.stderr if debug else subprocess.DEVNULL
    )
    options = firefox.options.Options()
    options.add_argument("--headless")
    if user_agent is not None:
        options.set_preference("general.useragent.override", user_agent)
    options.accept_insecure_certs = insecure

    # Don't wait to download images, css, etc
    options.page_load_strategy = "none"

    with tempfile.TemporaryDirectory() as tmpdirname:
        options.set_preference("browser.download.dir", tmpdirname)
        options.set_preference("browser.download.folderList", 2)

        with firefox.webdriver.WebDriver(options=options, service=service) as browser:
            try:
                browser.get(url)
            except WebDriverException as err:
                sys.exit(f"ERROR: {err}")
            url = urlparse(url)
            initial_content = browser.page_source
            try:
                WebDriverWait(browser, timeout).until(
                    lambda driver: driver.page_source != initial_content
                )
            except TimeoutException:
                tmpdir_files = os.listdir(tmpdirname)
                if len(tmpdir_files) == 1:
                    filename = output_file or os.path.basename(url.path)
                    shutil.move(os.path.join(tmpdirname, tmpdir_files.pop()), filename)
                    return
                assert len(tmpdir_files) != 0
                raise
            except WebDriverException as err:
                sys.exit(f"ERROR: {err}")
            if output_file:
                filename = output_file
            else:
                filename = os.path.basename(url.path) or "index"
                if url.query:
                    filename += f"?{url.query}"
                filename = filename.replace(os.sep, "_")
                content_type = browser.execute_script(
                    "return document.contentType;"
                ).split("/")[1]
                if not filename.endswith(content_type):
                    filename = f"{filename}.{content_type}"
                try_filename = filename
                counter = 1
                while os.path.exists(try_filename):
                    try_filename = f"{filename}.{counter}"
                    counter += 1
                filename = try_filename
            with open(filename, "w", encoding="utf-8") as file:
                file.write(browser.page_source)


def main() -> None:
    """
    Main function
    """
    opts = parse_opts()
    if not opts.url:
        sys.exit("Missing URL argument")
    for url in opts.url:
        xget(
            url,
            debug=opts.debug,
            insecure=opts.insecure,
            user_agent=opts.user_agent,
            timeout=opts.timeout,
            output_file=opts.output,
        )


def parse_opts() -> argparse.Namespace:
    """
    Parse options and arguments
    """
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("--debug", action="store_true", help="enable debug")
    parser.add_argument(
        "--insecure",
        action="store_true",
        help="allow insecure server connections when using SSL",
    )
    parser.add_argument("-O", "--output", help="output file")
    parser.add_argument(
        "-t", "--timeout", type=int, default=5, help="timeout in seconds"
    )
    parser.add_argument("-U", "--user-agent", help="user agent")
    parser.add_argument("--version", action="version", version=VERSION)
    parser.add_argument("url", nargs="+")
    return parser.parse_args()


if __name__ == "__main__":
    if not shutil.which("geckodriver"):
        sys.exit("You must install geckodriver anywhere in your PATH")
    os.umask(0o077)
    try:
        if is_container():
            with Display():
                main()
        else:
            main()
    except KeyboardInterrupt:
        sys.exit(1)
